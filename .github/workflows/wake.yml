name: Wake Streamlit App
on:
  workflow_dispatch:
  schedule:
    - cron: "*/30 6-22 * * 1-5"    # every 30m on weekdays (adjust as you prefer)

jobs:
  wake:
    runs-on: ubuntu-24.04
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ---- Fast probe (stdlib only) ----
      - name: Probe app (fast)
        id: probe
        env:
          APP_URL: ${{ secrets.APP_URL }}
        run: |
          python - <<'PY'
          import os, re, base64, pathlib, urllib.request, urllib.error
          url = os.environ["APP_URL"].rstrip("/") + "/?embed=true"
          asleep_re = re.compile(r"(gone to sleep|wake up|back up|get this app back|riattiva)", re.I)
          awake_hints = re.compile(r"(streamlit|data-testid=\"stapp|carry\-in|new arr|active aes)", re.I)
          ok = False
          try:
            req = urllib.request.Request(url, headers={"User-Agent": "CI-probe"})
            with urllib.request.urlopen(req, timeout=30) as r:
              status = r.getcode()
              html = r.read().decode("utf-8", errors="ignore").lower()
            ok = (status == 200 and not asleep_re.search(html) and awake_hints.search(html))
          except Exception as e:
            print("probe_error:", e)
          print("AWAKE:", ok)
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"awake={'true' if ok else 'false'}\n")
          # write a tiny PNG so the artifact step always finds a file when awake
          if ok:
            b64=b"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mP8/x8AAwMBoV0o5AsAAAAASUVORK5CYII="
            pathlib.Path("wake_screenshot.png").write_bytes(__import__("base64").b64decode(b64))
          PY

      # ---- Only install Playwright if the app looks asleep ----
      - name: Install Playwright (only if needed)
        if: steps.probe.outputs.awake != 'true'
        run: |
          pip install -q playwright
          playwright install --with-deps chromium

      - name: Wake (browser)
        if: steps.probe.outputs.awake != 'true'
        env:
          APP_URL: ${{ secrets.APP_URL }}
        run: |
          python wake.py

      - name: Upload screenshot
        uses: actions/upload-artifact@v4
        with:
          name: wake-screenshot
          path: wake_screenshot.png
          if-no-files-found: warn